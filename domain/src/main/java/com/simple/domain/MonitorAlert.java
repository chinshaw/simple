package com.simple.domain;

import java.util.Date;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.OneToOne;

import com.simple.original.api.analytics.AlertState;

@Entity
/*
@NamedQueries( value = { 
		@NamedQuery(name = "FactoryAlert.byAlertState", query = "select a from FactoryAlert as a where a.alertState = :alertState"),
		@NamedQuery(name = "FactoryAlert.byStateAndFactory", query = " select a from FactoryAlert as a where a.alertState = :alertState and a.factory.id = :factoryId"),
		@NamedQuery(name = "FactoryAlert.byFactory", query = "select a from FactoryAlert as a where a.factory.id = :factoryId"),
		@NamedQuery(name = "FactoryAlert.byStatus", query = "select a from FactoryAlert as a where a.status not like :status"),
		@NamedQuery(name = "FactoryAlert.deleteFactoryAlertsByAlertDefinitions", query = "DELETE from FactoryAlert e where e.alertDefinition.id in :alertIdList")
})
*/
public class MonitorAlert extends DatastoreObject {

	/**
     * Serialization Id
     */
    private static final long serialVersionUID = -485361916579283764L;

    /**
	 * This is the alert Definition Description.
	 */
    @Basic
    private String description;

    /**
     * This is Quix case Resolution and it will hold the resolution comment after the QUIX State is closed.
     */
    @Basic
    private String resolution;

    /**
     * QuixId Generated by QUIX Case System.
     */
    @Basic
    private String quixId;
    
    /**
     * State of Alert  and possible values will be Open, InProgress, Closed, Blocked
     */
    @Enumerated(EnumType.ORDINAL)
    private AlertState alertState;

    /**
     * Creation Date of factory Alert.
     */
    private Date creationDate;

    /**
     * This will be blank until Factory alert status is open and 
     * will be changed to Closed Date when Quix state is closed.
     */
    private Date closedDate;
	
    /**
     * Type of Alert.
     */
	private String alertType;
		
	/**
	 * Alert Status and its possible value is Critical, warning.
	 */
	private String status;
	
    /**
     * Holds the Factory  AlertDefinition.
     */
    @OneToOne(cascade = {CascadeType.PERSIST,CascadeType.MERGE},fetch= FetchType.LAZY, orphanRemoval = false)
    private AnalyticsTaskMonitor monitor;
	
    /**
     *  
     */
    @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE},fetch = FetchType.LAZY)
	private AnalyticsTaskExecution taskExecution;

    
    /**
     * Default constructor.
     */
    public MonitorAlert() {
        super();
    }
    
    /**
 	 * @return the alertDefinition
 	 */
 	public AnalyticsTaskMonitor getAlertDefinition() {	
 		return monitor;
 	}

 	/**
 	 * @param alertDefinition the alertDefinition to set
 	 */
 	public void setAlertDefinition(AnalyticsTaskMonitor alertDefinition) {
 		this.monitor = alertDefinition;
 	}
 	
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getResolution() {
        return resolution;
    }

    public void setResolution(String resolution) {
        this.resolution = resolution;
    }

    public String getQuixId() {
        return quixId;
    }

    public void setQuixId(String quixId) {
        this.quixId = quixId;
    }

    public AlertState getAlertState() {
        return alertState;
    }

    public void setAlertState(AlertState alertState) {
        this.alertState = alertState;
    }

    public Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }

    public Date getClosedDate() {
        return closedDate;
    }

    public void setClosedDate(Date closedDate) {
        this.closedDate = closedDate;
    }

	/**
	 * @return the alertType
	 */
	public String getAlertType() {
		return alertType;
	}

	/**
	 * @param alertType the alertType to set
	 */
	public void setAlertType(String alertType) {
		this.alertType = alertType;
	}

	/**
	 * @return the status
	 */
	public String getStatus() {
		return status;
	}

	/**
	 * @param status the status to set
	 */
	public void setStatus(String status) {
		this.status = status;
	}
		
	/**
	 * associated TaskExecution object
	 * @return
	 */
	public AnalyticsTaskExecution getTaskExecution() {
		return taskExecution;
	}

	/**
	 * Sets the associated Task Execution object
	 * @param taskExecution
	 */
	public void setTaskExecution(AnalyticsTaskExecution taskExecution) {
		this.taskExecution = taskExecution;
	}
}
