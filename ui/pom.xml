<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.simple</groupId>
		<artifactId>simple-analytics</artifactId>
		<version>1.1-SNAPSHOT</version>
	</parent>

	<artifactId>simple-analytics-web</artifactId>
	<packaging>war</packaging>
	<name>Simple Analytics Web</name>
	<description>Smart Analytics Web</description>

	<issueManagement>
		<system>github</system>
		<url>http://github.com/chinshaw/simple</url>
	</issueManagement>

	<properties>
		<!-- Convenience property to set the GWT version -->
		<gwtVersion>2.5.1</gwtVersion>
		<atmosphere.version>2.0.1</atmosphere.version>
		<!-- GWT needs at least java 1.6 -->
		<maven.compiler.source>1.6</maven.compiler.source>
		<maven.compiler.target>1.6</maven.compiler.target>
		<!-- Don't let your Mac use a crazy non-standard encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
	</properties>

	<!-- Configuration on which reports will be run, we really don't need the 
		dependencies plugin so we will disable it. It takes quite a while to run 
		if not -->
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.7</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>index</report>
							<report>project-team</report>
							<report>license</report>
							<report>mailing-list</report>
							<report>dependencies</report>
							<report>dependency-convergence</report>
							<report>plugin-management</report>
							<report>cim</report>
							<report>issue-tracking</report>
							<report>scm</report>
							<report>summary</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<!-- This is used to create a report for our unit tests. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.14.1</version>
			</plugin>

			<!-- Site plugin that will look at our bugzilla server and compile a report 
				of the open bugs that can be viewed on our site. This is very useful for 
				users to see if there is already an open issue that they are seeing. -->
			<plugin>
				<groupId>de.smartics.maven.plugin</groupId>
				<artifactId>issues-maven-plugin</artifactId>
				<version>0.4.3</version>
				<configuration>
					<issueManagementUser>reports@localhost.com</issueManagementUser>
					<issueManagementPassword>reports</issueManagementPassword>

					<product>Simple Analytics</product>
				</configuration>
				<reportSets>
					<reportSet>
						<reports>
							<report>bugzilla-releasenotes-report</report>
							<report>bugzilla-issues-report</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>

	<repositories>
		<repository>
			<id>plugins</id>
			<url>http://gwtquery-plugins.googlecode.com/svn/mavenrepo</url>
		</repository>

		<repository>
			<id>gwtquery-ui-repository</id>
			<url>http://gwtquery-ui.googlecode.com/svn/mavenrepo</url>
		</repository>

		<repository>
			<id>local_repo</id>
			<releases>
				<enabled>true</enabled>
				<checksumPolicy>ignore</checksumPolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<url>file://${project.basedir}/../local_repo</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>smartics</id>
			<url>http://www.smartics.eu/nexus/content/groups/public-group</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>


	<!-- Build Plugins -->
	<build>

		<!-- Generate compiled stuff in the folder used for development mode -->
		<outputDirectory>${project.build.directory}/${project.build.finalName}/WEB-INF/classes</outputDirectory>

		<plugins>
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<configuration>
					<wtpversion>1.5</wtpversion>
				</configuration>
			</plugin>
			<!-- Needed to compile the request factory stubs -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.5.1</version>
				<configuration>
					<annotationProcessors>
						<annotationProcessor>com.google.web.bindery.requestfactory.apt.RfValidator</annotationProcessor>
					</annotationProcessors>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
				<dependencies>
					<!-- Need to run the RF Validation tool. This works on both the command-line 
						and in Eclipse, provided that m2e-apt is installed. -->
					<dependency>
						<groupId>com.google.web.bindery</groupId>
						<artifactId>requestfactory-apt</artifactId>
						<version>${gwtVersion}</version>
					</dependency>
				</dependencies>
			</plugin>

			<!-- Gwt plugin to compile to js when necessary -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>gwt-maven-plugin</artifactId>
				<version>2.5.1</version>
				<dependencies>
					<dependency>
						<groupId>com.google.gwt</groupId>
						<artifactId>gwt-user</artifactId>
						<version>${gwtVersion}</version>
					</dependency>


					<dependency>
						<groupId>com.google.gwt</groupId>
						<artifactId>gwt-servlet</artifactId>
						<version>${gwtVersion}</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>

				<!-- JS is only needed in the package phase, this speeds up testing -->
				<executions>
					<execution>
						<phase>prepare-package</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions>

				<!-- Plugin configuration. There are many available options, see gwt-maven-plugin 
					documentation at codehaus.org -->
				<configuration>
					<webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
					<copyWebapp>true</copyWebapp>
				</configuration>
			</plugin>

			<!-- Copy static web files before executing gwt:run -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.4.2</version>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/${project.build.finalName}</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/webapp</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<!-- Add source folders to test classpath in order to run gwt-tests as 
				normal junit-tests -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<!-- !! Important only temporary until all unit tests are successful -->
					<testFailureIgnore>true</testFailureIgnore>
					<additionalClasspathElements>
						<additionalClasspathElement>${project.build.sourceDirectory}</additionalClasspathElement>
						<additionalClasspathElement>${project.build.testSourceDirectory}</additionalClasspathElement>
					</additionalClasspathElements>
					<useManifestOnlyJar>false</useManifestOnlyJar>
					<forkMode>always</forkMode>

					<!-- Folder for generated testing stuff -->
					<systemProperties>
						<property>
							<name>gwt.args</name>
							<value>-out
								${project.build.directory}/${project.build.finalName}</value>
						</property>
					</systemProperties>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.eclipse.m2e</groupId>
				<artifactId>lifecycle-mapping</artifactId>
				<version>1.0.0</version>
				<configuration>
					<lifecycleMappingMetadata>
						<pluginExecutions>
							<pluginExecution>
								<pluginExecutionFilter>
									<groupId>net.kindleit</groupId>
									<artifactId>maven-gae-plugin</artifactId>
									<versionRange>[0.7.3,)</versionRange>
									<goals>
										<goal>unpack</goal>
									</goals>
								</pluginExecutionFilter>
								<action>
									<execute />
								</action>
							</pluginExecution>
						</pluginExecutions>
					</lifecycleMappingMetadata>
				</configuration>
			</plugin>

			<!-- Apiviz is a plugin that will generate the visual output graphics 
				on our javadoc. This gives the user a visual representation of the layout 
				of the classes -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<doclet>org.jboss.apiviz.APIviz</doclet>
					<docletArtifact>
						<groupId>org.jboss.apiviz</groupId>
						<artifactId>apiviz</artifactId>
						<version>1.3.2.GA</version>
					</docletArtifact>
					<useStandardDocletOptions>true</useStandardDocletOptions>
					<charset>UTF-8</charset>
					<encoding>UTF-8</encoding>
					<docencoding>UTF-8</docencoding>
					<breakiterator>true</breakiterator>
					<version>true</version>
					<author>true</author>
					<keywords>true</keywords>
					<additionalparam>
						-sourceclasspath ${project.build.outputDirectory}
					</additionalparam>
				</configuration>
			</plugin>

			<!-- Site plugin so that it will compile our wiki documents to be viewed, 
				this way our documenation can be viewed right in the project and it can be 
				deployed using plugin. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.2</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.doxia</groupId>
						<artifactId>doxia-module-markdown</artifactId>
						<version>1.3</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>

	<dependencies>


<dependency>
	<groupId>com.google.gwt</groupId>
	<artifactId>gwt-soyc-vis</artifactId>
	<version>2.0.4</version>
</dependency>
		<dependency>
			<groupId>com.simple</groupId>
			<artifactId>simple-analytics-api</artifactId>
			<version>1.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>com.simple</groupId>
			<artifactId>simple-analytics-security</artifactId>
			<version>1.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>com.simple</groupId>
			<artifactId>simple-analytics-domain</artifactId>
			<version>1.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>com.simple</groupId>
			<artifactId>simple-analytics-engine</artifactId>
			<version>1.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>com.simple</groupId>
			<artifactId>simple-analytics-reporting</artifactId>
			<version>1.1-SNAPSHOT</version>
		</dependency>

		<!-- Google Web Toolkit (GWT) -->
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-user</artifactId>
			<version>${gwtVersion}</version>
			<!-- "provided" so that we don't deploy -->
			<scope>provided</scope>
		</dependency>

		<!-- GWT projects do not usually need a dependency on gwt-dev, but MobileWebApp 
			contains a GWTC Linker (AppCacheLinker) which in turn depends on internals 
			of the GWT compiler. -->
		<!-- <dependency> <groupId>com.google.gwt</groupId> <artifactId>gwt-dev</artifactId> 
			<version>${gwtVersion}</version> <scope>compile</scope> </dependency> -->

		<!-- RequestFactory server -->
		<dependency>
			<groupId>com.google.web.bindery</groupId>
			<artifactId>requestfactory-server</artifactId>
			<version>${gwtVersion}</version>
		</dependency>

		<dependency>
			<groupId>com.googlecode.gwtquery</groupId>
			<artifactId>gwtquery</artifactId>
			<version>1.3.3</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.googlecode.gwtquery.bundles</groupId>
			<artifactId>gquery-dnd-bundle</artifactId>
			<version>1.0.6</version>
			<scope>provided</scope>
		</dependency>

		<!-- GIN and Guice for IoC / DI -->
		<dependency>
			<groupId>com.google.inject.extensions</groupId>
			<artifactId>guice-servlet</artifactId>
			<version>${guice.version}</version>
		</dependency>

		<dependency>
			<groupId>com.google.gwt.inject</groupId>
			<artifactId>gin</artifactId>
			<version>2.1.1</version>
			<scope>compile</scope>
		</dependency>

		<!-- Used for templating of html alerts -->
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity</artifactId>
			<version>1.7</version>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.3.1</version>
		</dependency>


		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.1</version>
		</dependency>

		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3</version>
		</dependency>


		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
			<version>3.1</version>
		</dependency>

		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwtquery-ui</artifactId>
			<version>r146</version>
			<scope>provided</scope>
		</dependency>

		<!-- These are all local dependencies in the local repo directory -->

		<dependency>
			<groupId>com.google</groupId>
			<artifactId>codemirror2</artifactId>
			<version>1.2.0</version>
			<scope>provided</scope>
		</dependency>

	</dependencies>


</project>
