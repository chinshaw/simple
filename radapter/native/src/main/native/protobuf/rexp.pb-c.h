/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_rexp_2eproto__INCLUDED
#define PROTOBUF_C_rexp_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _REXP REXP;
typedef struct _STRING STRING;
typedef struct _CMPLX CMPLX;
typedef struct _Script Script;
typedef struct _EvalResponse EvalResponse;


/* --- enums --- */

typedef enum _REXP__RClass {
  REXP__RCLASS__STRING = 0,
  REXP__RCLASS__RAW = 1,
  REXP__RCLASS__REAL = 2,
  REXP__RCLASS__COMPLEX = 3,
  REXP__RCLASS__INTEGER = 4,
  REXP__RCLASS__LIST = 5,
  REXP__RCLASS__LOGICAL = 6,
  REXP__RCLASS__NULLTYPE = 7,
  REXP__RCLASS__REAL1 = 8,
  REXP__RCLASS__INTEGER1 = 10,
  REXP__RCLASS__STRING1 = 9
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(REXP__RCLASS)
} REXP__RClass;
typedef enum _REXP__RBOOLEAN {
  REXP__RBOOLEAN__F = 0,
  REXP__RBOOLEAN__T = 1,
  REXP__RBOOLEAN__NA = 2
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(REXP__RBOOLEAN)
} REXP__RBOOLEAN;

/* --- messages --- */

struct  _REXP
{
  ProtobufCMessage base;
  REXP__RClass rclass;
  size_t n_realvalue;
  double *realvalue;
  size_t n_intvalue;
  int32_t *intvalue;
  size_t n_booleanvalue;
  REXP__RBOOLEAN *booleanvalue;
  size_t n_stringvalue;
  STRING **stringvalue;
  protobuf_c_boolean has_rawvalue;
  ProtobufCBinaryData rawvalue;
  size_t n_complexvalue;
  CMPLX **complexvalue;
  size_t n_rexpvalue;
  REXP **rexpvalue;
  size_t n_attrname;
  char **attrname;
  size_t n_attrvalue;
  REXP **attrvalue;
  protobuf_c_boolean has_singlerealvalue;
  double singlerealvalue;
  STRING *singlestringvalue;
  protobuf_c_boolean has_singleintegervalue;
  int32_t singleintegervalue;
};
#define REXP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rexp__descriptor) \
    , 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,{0,NULL}, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,0, NULL, 0,0 }


struct  _STRING
{
  ProtobufCMessage base;
  char *strval;
  protobuf_c_boolean has_isna;
  protobuf_c_boolean isna;
};
#define STRING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&string__descriptor) \
    , NULL, 0,0 }


struct  _CMPLX
{
  ProtobufCMessage base;
  protobuf_c_boolean has_real;
  double real;
  double imag;
};
#define CMPLX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmplx__descriptor) \
    , 0,0, 0 }


struct  _Script
{
  ProtobufCMessage base;
  char *code;
};
#define SCRIPT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&script__descriptor) \
    , NULL }


struct  _EvalResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_exit_code;
  int32_t exit_code;
};
#define EVAL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eval_response__descriptor) \
    , 0,0 }


/* REXP methods */
void   rexp__init
                     (REXP         *message);
size_t rexp__get_packed_size
                     (const REXP   *message);
size_t rexp__pack
                     (const REXP   *message,
                      uint8_t             *out);
size_t rexp__pack_to_buffer
                     (const REXP   *message,
                      ProtobufCBuffer     *buffer);
REXP *
       rexp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rexp__free_unpacked
                     (REXP *message,
                      ProtobufCAllocator *allocator);
/* STRING methods */
void   string__init
                     (STRING         *message);
size_t string__get_packed_size
                     (const STRING   *message);
size_t string__pack
                     (const STRING   *message,
                      uint8_t             *out);
size_t string__pack_to_buffer
                     (const STRING   *message,
                      ProtobufCBuffer     *buffer);
STRING *
       string__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   string__free_unpacked
                     (STRING *message,
                      ProtobufCAllocator *allocator);
/* CMPLX methods */
void   cmplx__init
                     (CMPLX         *message);
size_t cmplx__get_packed_size
                     (const CMPLX   *message);
size_t cmplx__pack
                     (const CMPLX   *message,
                      uint8_t             *out);
size_t cmplx__pack_to_buffer
                     (const CMPLX   *message,
                      ProtobufCBuffer     *buffer);
CMPLX *
       cmplx__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmplx__free_unpacked
                     (CMPLX *message,
                      ProtobufCAllocator *allocator);
/* Script methods */
void   script__init
                     (Script         *message);
size_t script__get_packed_size
                     (const Script   *message);
size_t script__pack
                     (const Script   *message,
                      uint8_t             *out);
size_t script__pack_to_buffer
                     (const Script   *message,
                      ProtobufCBuffer     *buffer);
Script *
       script__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   script__free_unpacked
                     (Script *message,
                      ProtobufCAllocator *allocator);
/* EvalResponse methods */
void   eval_response__init
                     (EvalResponse         *message);
size_t eval_response__get_packed_size
                     (const EvalResponse   *message);
size_t eval_response__pack
                     (const EvalResponse   *message,
                      uint8_t             *out);
size_t eval_response__pack_to_buffer
                     (const EvalResponse   *message,
                      ProtobufCBuffer     *buffer);
EvalResponse *
       eval_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eval_response__free_unpacked
                     (EvalResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*REXP_Closure)
                 (const REXP *message,
                  void *closure_data);
typedef void (*STRING_Closure)
                 (const STRING *message,
                  void *closure_data);
typedef void (*CMPLX_Closure)
                 (const CMPLX *message,
                  void *closure_data);
typedef void (*Script_Closure)
                 (const Script *message,
                  void *closure_data);
typedef void (*EvalResponse_Closure)
                 (const EvalResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct _ScriptService_Service ScriptService_Service;
struct _ScriptService_Service
{
  ProtobufCService base;
  void (*eval)(ScriptService_Service *service,
               const Script *input,
               EvalResponse_Closure closure,
               void *closure_data);
};
typedef void (*ScriptService_ServiceDestroy)(ScriptService_Service *);
void script_service__init (ScriptService_Service *service,
                           ScriptService_ServiceDestroy destroy);
#define SCRIPT_SERVICE__BASE_INIT \
    { &script_service__descriptor, protobuf_c_service_invoke_internal, NULL }
#define SCRIPT_SERVICE__INIT(function_prefix__) \
    { SCRIPT_SERVICE__BASE_INIT,\
      function_prefix__ ## eval  }
void script_service__eval(ProtobufCService *service,
                          const Script *input,
                          EvalResponse_Closure closure,
                          void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor rexp__descriptor;
extern const ProtobufCEnumDescriptor    rexp__rclass__descriptor;
extern const ProtobufCEnumDescriptor    rexp__rboolean__descriptor;
extern const ProtobufCMessageDescriptor string__descriptor;
extern const ProtobufCMessageDescriptor cmplx__descriptor;
extern const ProtobufCMessageDescriptor script__descriptor;
extern const ProtobufCMessageDescriptor eval_response__descriptor;
extern const ProtobufCServiceDescriptor script_service__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_rexp_2eproto__INCLUDED */
