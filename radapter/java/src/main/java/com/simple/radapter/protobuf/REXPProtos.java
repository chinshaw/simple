// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/proto/rexp.proto

package com.simple.radapter.protobuf;

public final class REXPProtos {
  private REXPProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface RexpOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .radapter.Rexp.RClass rclass = 1;
    /**
     * <code>required .radapter.Rexp.RClass rclass = 1;</code>
     */
    boolean hasRclass();
    /**
     * <code>required .radapter.Rexp.RClass rclass = 1;</code>
     */
    com.simple.radapter.protobuf.REXPProtos.Rexp.RClass getRclass();

    // repeated double realValue = 2 [packed = true];
    /**
     * <code>repeated double realValue = 2 [packed = true];</code>
     */
    java.util.List<java.lang.Double> getRealValueList();
    /**
     * <code>repeated double realValue = 2 [packed = true];</code>
     */
    int getRealValueCount();
    /**
     * <code>repeated double realValue = 2 [packed = true];</code>
     */
    double getRealValue(int index);

    // repeated sint32 intValue = 3 [packed = true];
    /**
     * <code>repeated sint32 intValue = 3 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getIntValueList();
    /**
     * <code>repeated sint32 intValue = 3 [packed = true];</code>
     */
    int getIntValueCount();
    /**
     * <code>repeated sint32 intValue = 3 [packed = true];</code>
     */
    int getIntValue(int index);

    // repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;
    /**
     * <code>repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;</code>
     */
    java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN> getBooleanValueList();
    /**
     * <code>repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;</code>
     */
    int getBooleanValueCount();
    /**
     * <code>repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;</code>
     */
    com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN getBooleanValue(int index);

    // repeated string stringValue = 5;
    /**
     * <code>repeated string stringValue = 5;</code>
     */
    java.util.List<java.lang.String>
    getStringValueList();
    /**
     * <code>repeated string stringValue = 5;</code>
     */
    int getStringValueCount();
    /**
     * <code>repeated string stringValue = 5;</code>
     */
    java.lang.String getStringValue(int index);
    /**
     * <code>repeated string stringValue = 5;</code>
     */
    com.google.protobuf.ByteString
        getStringValueBytes(int index);

    // optional bytes rawValue = 6;
    /**
     * <code>optional bytes rawValue = 6;</code>
     */
    boolean hasRawValue();
    /**
     * <code>optional bytes rawValue = 6;</code>
     */
    com.google.protobuf.ByteString getRawValue();

    // repeated .radapter.CMPLX complexValue = 7;
    /**
     * <code>repeated .radapter.CMPLX complexValue = 7;</code>
     */
    java.util.List<com.simple.radapter.protobuf.REXPProtos.CMPLX> 
        getComplexValueList();
    /**
     * <code>repeated .radapter.CMPLX complexValue = 7;</code>
     */
    com.simple.radapter.protobuf.REXPProtos.CMPLX getComplexValue(int index);
    /**
     * <code>repeated .radapter.CMPLX complexValue = 7;</code>
     */
    int getComplexValueCount();

    // repeated .radapter.Rexp rexpValue = 8;
    /**
     * <code>repeated .radapter.Rexp rexpValue = 8;</code>
     */
    java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp> 
        getRexpValueList();
    /**
     * <code>repeated .radapter.Rexp rexpValue = 8;</code>
     */
    com.simple.radapter.protobuf.REXPProtos.Rexp getRexpValue(int index);
    /**
     * <code>repeated .radapter.Rexp rexpValue = 8;</code>
     */
    int getRexpValueCount();

    // repeated string attrName = 11;
    /**
     * <code>repeated string attrName = 11;</code>
     */
    java.util.List<java.lang.String>
    getAttrNameList();
    /**
     * <code>repeated string attrName = 11;</code>
     */
    int getAttrNameCount();
    /**
     * <code>repeated string attrName = 11;</code>
     */
    java.lang.String getAttrName(int index);
    /**
     * <code>repeated string attrName = 11;</code>
     */
    com.google.protobuf.ByteString
        getAttrNameBytes(int index);

    // repeated .radapter.Rexp attrValue = 12;
    /**
     * <code>repeated .radapter.Rexp attrValue = 12;</code>
     */
    java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp> 
        getAttrValueList();
    /**
     * <code>repeated .radapter.Rexp attrValue = 12;</code>
     */
    com.simple.radapter.protobuf.REXPProtos.Rexp getAttrValue(int index);
    /**
     * <code>repeated .radapter.Rexp attrValue = 12;</code>
     */
    int getAttrValueCount();
  }
  /**
   * Protobuf type {@code radapter.Rexp}
   */
  public static final class Rexp extends
      com.google.protobuf.GeneratedMessageLite
      implements RexpOrBuilder {
    // Use Rexp.newBuilder() to construct.
    private Rexp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Rexp(boolean noInit) {}

    private static final Rexp defaultInstance;
    public static Rexp getDefaultInstance() {
      return defaultInstance;
    }

    public Rexp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Rexp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.simple.radapter.protobuf.REXPProtos.Rexp.RClass value = com.simple.radapter.protobuf.REXPProtos.Rexp.RClass.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                rclass_ = value;
              }
              break;
            }
            case 17: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                realValue_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000002;
              }
              realValue_.add(input.readDouble());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                realValue_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                realValue_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                intValue_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              intValue_.add(input.readSInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                intValue_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                intValue_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN value = com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN.valueOf(rawValue);
              if (value != null) {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  booleanValue_ = new java.util.ArrayList<com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN>();
                  mutable_bitField0_ |= 0x00000008;
                }
                booleanValue_.add(value);
              }
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN value = com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN.valueOf(rawValue);
                if (value != null) {
                  if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                    booleanValue_ = new java.util.ArrayList<com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN>();
                    mutable_bitField0_ |= 0x00000008;
                  }
                  booleanValue_.add(value);
                }
              }
              input.popLimit(oldLimit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                stringValue_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000010;
              }
              stringValue_.add(input.readBytes());
              break;
            }
            case 50: {
              bitField0_ |= 0x00000002;
              rawValue_ = input.readBytes();
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                complexValue_ = new java.util.ArrayList<com.simple.radapter.protobuf.REXPProtos.CMPLX>();
                mutable_bitField0_ |= 0x00000040;
              }
              complexValue_.add(input.readMessage(com.simple.radapter.protobuf.REXPProtos.CMPLX.PARSER, extensionRegistry));
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                rexpValue_ = new java.util.ArrayList<com.simple.radapter.protobuf.REXPProtos.Rexp>();
                mutable_bitField0_ |= 0x00000080;
              }
              rexpValue_.add(input.readMessage(com.simple.radapter.protobuf.REXPProtos.Rexp.PARSER, extensionRegistry));
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                attrName_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000100;
              }
              attrName_.add(input.readBytes());
              break;
            }
            case 98: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                attrValue_ = new java.util.ArrayList<com.simple.radapter.protobuf.REXPProtos.Rexp>();
                mutable_bitField0_ |= 0x00000200;
              }
              attrValue_.add(input.readMessage(com.simple.radapter.protobuf.REXPProtos.Rexp.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          realValue_ = java.util.Collections.unmodifiableList(realValue_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          intValue_ = java.util.Collections.unmodifiableList(intValue_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          booleanValue_ = java.util.Collections.unmodifiableList(booleanValue_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          stringValue_ = new com.google.protobuf.UnmodifiableLazyStringList(stringValue_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          complexValue_ = java.util.Collections.unmodifiableList(complexValue_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          rexpValue_ = java.util.Collections.unmodifiableList(rexpValue_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          attrName_ = new com.google.protobuf.UnmodifiableLazyStringList(attrName_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          attrValue_ = java.util.Collections.unmodifiableList(attrValue_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Rexp> PARSER =
        new com.google.protobuf.AbstractParser<Rexp>() {
      public Rexp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Rexp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Rexp> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code radapter.Rexp.RClass}
     */
    public enum RClass
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>NILSXP = 0;</code>
       *
       * <pre>
       * nil = NULL 
       * </pre>
       */
      NILSXP(0, 0),
      /**
       * <code>SYMSXP = 1;</code>
       *
       * <pre>
       * symbols 
       * </pre>
       */
      SYMSXP(1, 1),
      /**
       * <code>LISTSXP = 2;</code>
       *
       * <pre>
       * lists of dotted pairs 
       * </pre>
       */
      LISTSXP(2, 2),
      /**
       * <code>CLOSXP = 3;</code>
       *
       * <pre>
       * closures 
       * </pre>
       */
      CLOSXP(3, 3),
      /**
       * <code>ENVSXP = 4;</code>
       *
       * <pre>
       * environments 
       * </pre>
       */
      ENVSXP(4, 4),
      /**
       * <code>PROMSXP = 5;</code>
       *
       * <pre>
       * promises: [un]evaluated closure arguments 
       * </pre>
       */
      PROMSXP(5, 5),
      /**
       * <code>LANGSXP = 6;</code>
       *
       * <pre>
       * language constructs (special lists) 
       * </pre>
       */
      LANGSXP(6, 6),
      /**
       * <code>SPECIALSXP = 7;</code>
       *
       * <pre>
       * special forms 
       * </pre>
       */
      SPECIALSXP(7, 7),
      /**
       * <code>BUILTINSXP = 8;</code>
       *
       * <pre>
       * builtin non-special forms 
       * </pre>
       */
      BUILTINSXP(8, 8),
      /**
       * <code>CHARSXP = 9;</code>
       *
       * <pre>
       * "scalar" string type (internal only)
       * </pre>
       */
      CHARSXP(9, 9),
      /**
       * <code>LGLSXP = 10;</code>
       *
       * <pre>
       * logical vectors 
       * </pre>
       */
      LGLSXP(10, 10),
      /**
       * <code>INTSXP = 13;</code>
       *
       * <pre>
       * integer vectors 
       * </pre>
       */
      INTSXP(11, 13),
      /**
       * <code>REALSXP = 14;</code>
       *
       * <pre>
       * real variables 
       * </pre>
       */
      REALSXP(12, 14),
      /**
       * <code>CPLXSXP = 15;</code>
       *
       * <pre>
       * complex variables 
       * </pre>
       */
      CPLXSXP(13, 15),
      /**
       * <code>STRSXP = 16;</code>
       *
       * <pre>
       * string vectors 
       * </pre>
       */
      STRSXP(14, 16),
      /**
       * <code>DOTSXP = 17;</code>
       *
       * <pre>
       * dot-dot-dot object 
       * </pre>
       */
      DOTSXP(15, 17),
      /**
       * <code>ANYSXP = 18;</code>
       *
       * <pre>
       * make "any" args work.
       *Used in specifying types for symbol
       *registration to mean anything is okay  
       * </pre>
       */
      ANYSXP(16, 18),
      /**
       * <code>VECSXP = 19;</code>
       *
       * <pre>
       * generic vectors 
       * </pre>
       */
      VECSXP(17, 19),
      /**
       * <code>EXPRSXP = 20;</code>
       *
       * <pre>
       * expressions vectors 
       * </pre>
       */
      EXPRSXP(18, 20),
      /**
       * <code>BCODESXP = 21;</code>
       *
       * <pre>
       * byte code 
       * </pre>
       */
      BCODESXP(19, 21),
      /**
       * <code>EXTPTRSXP = 22;</code>
       *
       * <pre>
       * external pointer 
       * </pre>
       */
      EXTPTRSXP(20, 22),
      /**
       * <code>WEAKREFSXP = 23;</code>
       *
       * <pre>
       * weak reference 
       * </pre>
       */
      WEAKREFSXP(21, 23),
      /**
       * <code>RAWSXP = 24;</code>
       *
       * <pre>
       * raw bytes 
       * </pre>
       */
      RAWSXP(22, 24),
      /**
       * <code>S4SXP = 25;</code>
       *
       * <pre>
       * S4, non-vector 
       * </pre>
       */
      S4SXP(23, 25),
      /**
       * <code>NEWSXP = 30;</code>
       *
       * <pre>
       * fresh node creaed in new page 
       * </pre>
       */
      NEWSXP(24, 30),
      /**
       * <code>FREESXP = 31;</code>
       *
       * <pre>
       * node released by GC 
       * </pre>
       */
      FREESXP(25, 31),
      /**
       * <code>FUNSXP = 99;</code>
       *
       * <pre>
       * Closure or Builtin or Special 
       * </pre>
       */
      FUNSXP(26, 99),
      ;

      /**
       * <code>NILSXP = 0;</code>
       *
       * <pre>
       * nil = NULL 
       * </pre>
       */
      public static final int NILSXP_VALUE = 0;
      /**
       * <code>SYMSXP = 1;</code>
       *
       * <pre>
       * symbols 
       * </pre>
       */
      public static final int SYMSXP_VALUE = 1;
      /**
       * <code>LISTSXP = 2;</code>
       *
       * <pre>
       * lists of dotted pairs 
       * </pre>
       */
      public static final int LISTSXP_VALUE = 2;
      /**
       * <code>CLOSXP = 3;</code>
       *
       * <pre>
       * closures 
       * </pre>
       */
      public static final int CLOSXP_VALUE = 3;
      /**
       * <code>ENVSXP = 4;</code>
       *
       * <pre>
       * environments 
       * </pre>
       */
      public static final int ENVSXP_VALUE = 4;
      /**
       * <code>PROMSXP = 5;</code>
       *
       * <pre>
       * promises: [un]evaluated closure arguments 
       * </pre>
       */
      public static final int PROMSXP_VALUE = 5;
      /**
       * <code>LANGSXP = 6;</code>
       *
       * <pre>
       * language constructs (special lists) 
       * </pre>
       */
      public static final int LANGSXP_VALUE = 6;
      /**
       * <code>SPECIALSXP = 7;</code>
       *
       * <pre>
       * special forms 
       * </pre>
       */
      public static final int SPECIALSXP_VALUE = 7;
      /**
       * <code>BUILTINSXP = 8;</code>
       *
       * <pre>
       * builtin non-special forms 
       * </pre>
       */
      public static final int BUILTINSXP_VALUE = 8;
      /**
       * <code>CHARSXP = 9;</code>
       *
       * <pre>
       * "scalar" string type (internal only)
       * </pre>
       */
      public static final int CHARSXP_VALUE = 9;
      /**
       * <code>LGLSXP = 10;</code>
       *
       * <pre>
       * logical vectors 
       * </pre>
       */
      public static final int LGLSXP_VALUE = 10;
      /**
       * <code>INTSXP = 13;</code>
       *
       * <pre>
       * integer vectors 
       * </pre>
       */
      public static final int INTSXP_VALUE = 13;
      /**
       * <code>REALSXP = 14;</code>
       *
       * <pre>
       * real variables 
       * </pre>
       */
      public static final int REALSXP_VALUE = 14;
      /**
       * <code>CPLXSXP = 15;</code>
       *
       * <pre>
       * complex variables 
       * </pre>
       */
      public static final int CPLXSXP_VALUE = 15;
      /**
       * <code>STRSXP = 16;</code>
       *
       * <pre>
       * string vectors 
       * </pre>
       */
      public static final int STRSXP_VALUE = 16;
      /**
       * <code>DOTSXP = 17;</code>
       *
       * <pre>
       * dot-dot-dot object 
       * </pre>
       */
      public static final int DOTSXP_VALUE = 17;
      /**
       * <code>ANYSXP = 18;</code>
       *
       * <pre>
       * make "any" args work.
       *Used in specifying types for symbol
       *registration to mean anything is okay  
       * </pre>
       */
      public static final int ANYSXP_VALUE = 18;
      /**
       * <code>VECSXP = 19;</code>
       *
       * <pre>
       * generic vectors 
       * </pre>
       */
      public static final int VECSXP_VALUE = 19;
      /**
       * <code>EXPRSXP = 20;</code>
       *
       * <pre>
       * expressions vectors 
       * </pre>
       */
      public static final int EXPRSXP_VALUE = 20;
      /**
       * <code>BCODESXP = 21;</code>
       *
       * <pre>
       * byte code 
       * </pre>
       */
      public static final int BCODESXP_VALUE = 21;
      /**
       * <code>EXTPTRSXP = 22;</code>
       *
       * <pre>
       * external pointer 
       * </pre>
       */
      public static final int EXTPTRSXP_VALUE = 22;
      /**
       * <code>WEAKREFSXP = 23;</code>
       *
       * <pre>
       * weak reference 
       * </pre>
       */
      public static final int WEAKREFSXP_VALUE = 23;
      /**
       * <code>RAWSXP = 24;</code>
       *
       * <pre>
       * raw bytes 
       * </pre>
       */
      public static final int RAWSXP_VALUE = 24;
      /**
       * <code>S4SXP = 25;</code>
       *
       * <pre>
       * S4, non-vector 
       * </pre>
       */
      public static final int S4SXP_VALUE = 25;
      /**
       * <code>NEWSXP = 30;</code>
       *
       * <pre>
       * fresh node creaed in new page 
       * </pre>
       */
      public static final int NEWSXP_VALUE = 30;
      /**
       * <code>FREESXP = 31;</code>
       *
       * <pre>
       * node released by GC 
       * </pre>
       */
      public static final int FREESXP_VALUE = 31;
      /**
       * <code>FUNSXP = 99;</code>
       *
       * <pre>
       * Closure or Builtin or Special 
       * </pre>
       */
      public static final int FUNSXP_VALUE = 99;


      public final int getNumber() { return value; }

      public static RClass valueOf(int value) {
        switch (value) {
          case 0: return NILSXP;
          case 1: return SYMSXP;
          case 2: return LISTSXP;
          case 3: return CLOSXP;
          case 4: return ENVSXP;
          case 5: return PROMSXP;
          case 6: return LANGSXP;
          case 7: return SPECIALSXP;
          case 8: return BUILTINSXP;
          case 9: return CHARSXP;
          case 10: return LGLSXP;
          case 13: return INTSXP;
          case 14: return REALSXP;
          case 15: return CPLXSXP;
          case 16: return STRSXP;
          case 17: return DOTSXP;
          case 18: return ANYSXP;
          case 19: return VECSXP;
          case 20: return EXPRSXP;
          case 21: return BCODESXP;
          case 22: return EXTPTRSXP;
          case 23: return WEAKREFSXP;
          case 24: return RAWSXP;
          case 25: return S4SXP;
          case 30: return NEWSXP;
          case 31: return FREESXP;
          case 99: return FUNSXP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RClass>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RClass>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RClass>() {
              public RClass findValueByNumber(int number) {
                return RClass.valueOf(number);
              }
            };

      private final int value;

      private RClass(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:radapter.Rexp.RClass)
    }

    /**
     * Protobuf enum {@code radapter.Rexp.RBOOLEAN}
     */
    public enum RBOOLEAN
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>F = 0;</code>
       */
      F(0, 0),
      /**
       * <code>T = 1;</code>
       */
      T(1, 1),
      /**
       * <code>NA = 2;</code>
       */
      NA(2, 2),
      ;

      /**
       * <code>F = 0;</code>
       */
      public static final int F_VALUE = 0;
      /**
       * <code>T = 1;</code>
       */
      public static final int T_VALUE = 1;
      /**
       * <code>NA = 2;</code>
       */
      public static final int NA_VALUE = 2;


      public final int getNumber() { return value; }

      public static RBOOLEAN valueOf(int value) {
        switch (value) {
          case 0: return F;
          case 1: return T;
          case 2: return NA;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RBOOLEAN>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RBOOLEAN>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RBOOLEAN>() {
              public RBOOLEAN findValueByNumber(int number) {
                return RBOOLEAN.valueOf(number);
              }
            };

      private final int value;

      private RBOOLEAN(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:radapter.Rexp.RBOOLEAN)
    }

    private int bitField0_;
    // required .radapter.Rexp.RClass rclass = 1;
    public static final int RCLASS_FIELD_NUMBER = 1;
    private com.simple.radapter.protobuf.REXPProtos.Rexp.RClass rclass_;
    /**
     * <code>required .radapter.Rexp.RClass rclass = 1;</code>
     */
    public boolean hasRclass() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .radapter.Rexp.RClass rclass = 1;</code>
     */
    public com.simple.radapter.protobuf.REXPProtos.Rexp.RClass getRclass() {
      return rclass_;
    }

    // repeated double realValue = 2 [packed = true];
    public static final int REALVALUE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Double> realValue_;
    /**
     * <code>repeated double realValue = 2 [packed = true];</code>
     */
    public java.util.List<java.lang.Double>
        getRealValueList() {
      return realValue_;
    }
    /**
     * <code>repeated double realValue = 2 [packed = true];</code>
     */
    public int getRealValueCount() {
      return realValue_.size();
    }
    /**
     * <code>repeated double realValue = 2 [packed = true];</code>
     */
    public double getRealValue(int index) {
      return realValue_.get(index);
    }
    private int realValueMemoizedSerializedSize = -1;

    // repeated sint32 intValue = 3 [packed = true];
    public static final int INTVALUE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> intValue_;
    /**
     * <code>repeated sint32 intValue = 3 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getIntValueList() {
      return intValue_;
    }
    /**
     * <code>repeated sint32 intValue = 3 [packed = true];</code>
     */
    public int getIntValueCount() {
      return intValue_.size();
    }
    /**
     * <code>repeated sint32 intValue = 3 [packed = true];</code>
     */
    public int getIntValue(int index) {
      return intValue_.get(index);
    }
    private int intValueMemoizedSerializedSize = -1;

    // repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;
    public static final int BOOLEANVALUE_FIELD_NUMBER = 4;
    private java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN> booleanValue_;
    /**
     * <code>repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;</code>
     */
    public java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN> getBooleanValueList() {
      return booleanValue_;
    }
    /**
     * <code>repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;</code>
     */
    public int getBooleanValueCount() {
      return booleanValue_.size();
    }
    /**
     * <code>repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;</code>
     */
    public com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN getBooleanValue(int index) {
      return booleanValue_.get(index);
    }

    // repeated string stringValue = 5;
    public static final int STRINGVALUE_FIELD_NUMBER = 5;
    private com.google.protobuf.LazyStringList stringValue_;
    /**
     * <code>repeated string stringValue = 5;</code>
     */
    public java.util.List<java.lang.String>
        getStringValueList() {
      return stringValue_;
    }
    /**
     * <code>repeated string stringValue = 5;</code>
     */
    public int getStringValueCount() {
      return stringValue_.size();
    }
    /**
     * <code>repeated string stringValue = 5;</code>
     */
    public java.lang.String getStringValue(int index) {
      return stringValue_.get(index);
    }
    /**
     * <code>repeated string stringValue = 5;</code>
     */
    public com.google.protobuf.ByteString
        getStringValueBytes(int index) {
      return stringValue_.getByteString(index);
    }

    // optional bytes rawValue = 6;
    public static final int RAWVALUE_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString rawValue_;
    /**
     * <code>optional bytes rawValue = 6;</code>
     */
    public boolean hasRawValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bytes rawValue = 6;</code>
     */
    public com.google.protobuf.ByteString getRawValue() {
      return rawValue_;
    }

    // repeated .radapter.CMPLX complexValue = 7;
    public static final int COMPLEXVALUE_FIELD_NUMBER = 7;
    private java.util.List<com.simple.radapter.protobuf.REXPProtos.CMPLX> complexValue_;
    /**
     * <code>repeated .radapter.CMPLX complexValue = 7;</code>
     */
    public java.util.List<com.simple.radapter.protobuf.REXPProtos.CMPLX> getComplexValueList() {
      return complexValue_;
    }
    /**
     * <code>repeated .radapter.CMPLX complexValue = 7;</code>
     */
    public java.util.List<? extends com.simple.radapter.protobuf.REXPProtos.CMPLXOrBuilder> 
        getComplexValueOrBuilderList() {
      return complexValue_;
    }
    /**
     * <code>repeated .radapter.CMPLX complexValue = 7;</code>
     */
    public int getComplexValueCount() {
      return complexValue_.size();
    }
    /**
     * <code>repeated .radapter.CMPLX complexValue = 7;</code>
     */
    public com.simple.radapter.protobuf.REXPProtos.CMPLX getComplexValue(int index) {
      return complexValue_.get(index);
    }
    /**
     * <code>repeated .radapter.CMPLX complexValue = 7;</code>
     */
    public com.simple.radapter.protobuf.REXPProtos.CMPLXOrBuilder getComplexValueOrBuilder(
        int index) {
      return complexValue_.get(index);
    }

    // repeated .radapter.Rexp rexpValue = 8;
    public static final int REXPVALUE_FIELD_NUMBER = 8;
    private java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp> rexpValue_;
    /**
     * <code>repeated .radapter.Rexp rexpValue = 8;</code>
     */
    public java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp> getRexpValueList() {
      return rexpValue_;
    }
    /**
     * <code>repeated .radapter.Rexp rexpValue = 8;</code>
     */
    public java.util.List<? extends com.simple.radapter.protobuf.REXPProtos.RexpOrBuilder> 
        getRexpValueOrBuilderList() {
      return rexpValue_;
    }
    /**
     * <code>repeated .radapter.Rexp rexpValue = 8;</code>
     */
    public int getRexpValueCount() {
      return rexpValue_.size();
    }
    /**
     * <code>repeated .radapter.Rexp rexpValue = 8;</code>
     */
    public com.simple.radapter.protobuf.REXPProtos.Rexp getRexpValue(int index) {
      return rexpValue_.get(index);
    }
    /**
     * <code>repeated .radapter.Rexp rexpValue = 8;</code>
     */
    public com.simple.radapter.protobuf.REXPProtos.RexpOrBuilder getRexpValueOrBuilder(
        int index) {
      return rexpValue_.get(index);
    }

    // repeated string attrName = 11;
    public static final int ATTRNAME_FIELD_NUMBER = 11;
    private com.google.protobuf.LazyStringList attrName_;
    /**
     * <code>repeated string attrName = 11;</code>
     */
    public java.util.List<java.lang.String>
        getAttrNameList() {
      return attrName_;
    }
    /**
     * <code>repeated string attrName = 11;</code>
     */
    public int getAttrNameCount() {
      return attrName_.size();
    }
    /**
     * <code>repeated string attrName = 11;</code>
     */
    public java.lang.String getAttrName(int index) {
      return attrName_.get(index);
    }
    /**
     * <code>repeated string attrName = 11;</code>
     */
    public com.google.protobuf.ByteString
        getAttrNameBytes(int index) {
      return attrName_.getByteString(index);
    }

    // repeated .radapter.Rexp attrValue = 12;
    public static final int ATTRVALUE_FIELD_NUMBER = 12;
    private java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp> attrValue_;
    /**
     * <code>repeated .radapter.Rexp attrValue = 12;</code>
     */
    public java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp> getAttrValueList() {
      return attrValue_;
    }
    /**
     * <code>repeated .radapter.Rexp attrValue = 12;</code>
     */
    public java.util.List<? extends com.simple.radapter.protobuf.REXPProtos.RexpOrBuilder> 
        getAttrValueOrBuilderList() {
      return attrValue_;
    }
    /**
     * <code>repeated .radapter.Rexp attrValue = 12;</code>
     */
    public int getAttrValueCount() {
      return attrValue_.size();
    }
    /**
     * <code>repeated .radapter.Rexp attrValue = 12;</code>
     */
    public com.simple.radapter.protobuf.REXPProtos.Rexp getAttrValue(int index) {
      return attrValue_.get(index);
    }
    /**
     * <code>repeated .radapter.Rexp attrValue = 12;</code>
     */
    public com.simple.radapter.protobuf.REXPProtos.RexpOrBuilder getAttrValueOrBuilder(
        int index) {
      return attrValue_.get(index);
    }

    private void initFields() {
      rclass_ = com.simple.radapter.protobuf.REXPProtos.Rexp.RClass.NILSXP;
      realValue_ = java.util.Collections.emptyList();
      intValue_ = java.util.Collections.emptyList();
      booleanValue_ = java.util.Collections.emptyList();
      stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      rawValue_ = com.google.protobuf.ByteString.EMPTY;
      complexValue_ = java.util.Collections.emptyList();
      rexpValue_ = java.util.Collections.emptyList();
      attrName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      attrValue_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasRclass()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getComplexValueCount(); i++) {
        if (!getComplexValue(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getRexpValueCount(); i++) {
        if (!getRexpValue(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAttrValueCount(); i++) {
        if (!getAttrValue(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, rclass_.getNumber());
      }
      if (getRealValueList().size() > 0) {
        output.writeRawVarint32(18);
        output.writeRawVarint32(realValueMemoizedSerializedSize);
      }
      for (int i = 0; i < realValue_.size(); i++) {
        output.writeDoubleNoTag(realValue_.get(i));
      }
      if (getIntValueList().size() > 0) {
        output.writeRawVarint32(26);
        output.writeRawVarint32(intValueMemoizedSerializedSize);
      }
      for (int i = 0; i < intValue_.size(); i++) {
        output.writeSInt32NoTag(intValue_.get(i));
      }
      for (int i = 0; i < booleanValue_.size(); i++) {
        output.writeEnum(4, booleanValue_.get(i).getNumber());
      }
      for (int i = 0; i < stringValue_.size(); i++) {
        output.writeBytes(5, stringValue_.getByteString(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(6, rawValue_);
      }
      for (int i = 0; i < complexValue_.size(); i++) {
        output.writeMessage(7, complexValue_.get(i));
      }
      for (int i = 0; i < rexpValue_.size(); i++) {
        output.writeMessage(8, rexpValue_.get(i));
      }
      for (int i = 0; i < attrName_.size(); i++) {
        output.writeBytes(11, attrName_.getByteString(i));
      }
      for (int i = 0; i < attrValue_.size(); i++) {
        output.writeMessage(12, attrValue_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, rclass_.getNumber());
      }
      {
        int dataSize = 0;
        dataSize = 8 * getRealValueList().size();
        size += dataSize;
        if (!getRealValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        realValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < intValue_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(intValue_.get(i));
        }
        size += dataSize;
        if (!getIntValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        intValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < booleanValue_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(booleanValue_.get(i).getNumber());
        }
        size += dataSize;
        size += 1 * booleanValue_.size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < stringValue_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(stringValue_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getStringValueList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, rawValue_);
      }
      for (int i = 0; i < complexValue_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, complexValue_.get(i));
      }
      for (int i = 0; i < rexpValue_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, rexpValue_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < attrName_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(attrName_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getAttrNameList().size();
      }
      for (int i = 0; i < attrValue_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, attrValue_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.simple.radapter.protobuf.REXPProtos.Rexp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Rexp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Rexp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Rexp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Rexp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Rexp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Rexp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Rexp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Rexp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Rexp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.simple.radapter.protobuf.REXPProtos.Rexp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code radapter.Rexp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.simple.radapter.protobuf.REXPProtos.Rexp, Builder>
        implements com.simple.radapter.protobuf.REXPProtos.RexpOrBuilder {
      // Construct using com.simple.radapter.protobuf.REXPProtos.Rexp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        rclass_ = com.simple.radapter.protobuf.REXPProtos.Rexp.RClass.NILSXP;
        bitField0_ = (bitField0_ & ~0x00000001);
        realValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        intValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        booleanValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        rawValue_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        complexValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        rexpValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        attrName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000100);
        attrValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.simple.radapter.protobuf.REXPProtos.Rexp getDefaultInstanceForType() {
        return com.simple.radapter.protobuf.REXPProtos.Rexp.getDefaultInstance();
      }

      public com.simple.radapter.protobuf.REXPProtos.Rexp build() {
        com.simple.radapter.protobuf.REXPProtos.Rexp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.simple.radapter.protobuf.REXPProtos.Rexp buildPartial() {
        com.simple.radapter.protobuf.REXPProtos.Rexp result = new com.simple.radapter.protobuf.REXPProtos.Rexp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.rclass_ = rclass_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          realValue_ = java.util.Collections.unmodifiableList(realValue_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.realValue_ = realValue_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          intValue_ = java.util.Collections.unmodifiableList(intValue_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.intValue_ = intValue_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          booleanValue_ = java.util.Collections.unmodifiableList(booleanValue_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.booleanValue_ = booleanValue_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          stringValue_ = new com.google.protobuf.UnmodifiableLazyStringList(
              stringValue_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.stringValue_ = stringValue_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000002;
        }
        result.rawValue_ = rawValue_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          complexValue_ = java.util.Collections.unmodifiableList(complexValue_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.complexValue_ = complexValue_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          rexpValue_ = java.util.Collections.unmodifiableList(rexpValue_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.rexpValue_ = rexpValue_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          attrName_ = new com.google.protobuf.UnmodifiableLazyStringList(
              attrName_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.attrName_ = attrName_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          attrValue_ = java.util.Collections.unmodifiableList(attrValue_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.attrValue_ = attrValue_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.simple.radapter.protobuf.REXPProtos.Rexp other) {
        if (other == com.simple.radapter.protobuf.REXPProtos.Rexp.getDefaultInstance()) return this;
        if (other.hasRclass()) {
          setRclass(other.getRclass());
        }
        if (!other.realValue_.isEmpty()) {
          if (realValue_.isEmpty()) {
            realValue_ = other.realValue_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureRealValueIsMutable();
            realValue_.addAll(other.realValue_);
          }
          
        }
        if (!other.intValue_.isEmpty()) {
          if (intValue_.isEmpty()) {
            intValue_ = other.intValue_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureIntValueIsMutable();
            intValue_.addAll(other.intValue_);
          }
          
        }
        if (!other.booleanValue_.isEmpty()) {
          if (booleanValue_.isEmpty()) {
            booleanValue_ = other.booleanValue_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureBooleanValueIsMutable();
            booleanValue_.addAll(other.booleanValue_);
          }
          
        }
        if (!other.stringValue_.isEmpty()) {
          if (stringValue_.isEmpty()) {
            stringValue_ = other.stringValue_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureStringValueIsMutable();
            stringValue_.addAll(other.stringValue_);
          }
          
        }
        if (other.hasRawValue()) {
          setRawValue(other.getRawValue());
        }
        if (!other.complexValue_.isEmpty()) {
          if (complexValue_.isEmpty()) {
            complexValue_ = other.complexValue_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureComplexValueIsMutable();
            complexValue_.addAll(other.complexValue_);
          }
          
        }
        if (!other.rexpValue_.isEmpty()) {
          if (rexpValue_.isEmpty()) {
            rexpValue_ = other.rexpValue_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureRexpValueIsMutable();
            rexpValue_.addAll(other.rexpValue_);
          }
          
        }
        if (!other.attrName_.isEmpty()) {
          if (attrName_.isEmpty()) {
            attrName_ = other.attrName_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureAttrNameIsMutable();
            attrName_.addAll(other.attrName_);
          }
          
        }
        if (!other.attrValue_.isEmpty()) {
          if (attrValue_.isEmpty()) {
            attrValue_ = other.attrValue_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureAttrValueIsMutable();
            attrValue_.addAll(other.attrValue_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRclass()) {
          
          return false;
        }
        for (int i = 0; i < getComplexValueCount(); i++) {
          if (!getComplexValue(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getRexpValueCount(); i++) {
          if (!getRexpValue(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getAttrValueCount(); i++) {
          if (!getAttrValue(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.simple.radapter.protobuf.REXPProtos.Rexp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.simple.radapter.protobuf.REXPProtos.Rexp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .radapter.Rexp.RClass rclass = 1;
      private com.simple.radapter.protobuf.REXPProtos.Rexp.RClass rclass_ = com.simple.radapter.protobuf.REXPProtos.Rexp.RClass.NILSXP;
      /**
       * <code>required .radapter.Rexp.RClass rclass = 1;</code>
       */
      public boolean hasRclass() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .radapter.Rexp.RClass rclass = 1;</code>
       */
      public com.simple.radapter.protobuf.REXPProtos.Rexp.RClass getRclass() {
        return rclass_;
      }
      /**
       * <code>required .radapter.Rexp.RClass rclass = 1;</code>
       */
      public Builder setRclass(com.simple.radapter.protobuf.REXPProtos.Rexp.RClass value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        rclass_ = value;
        
        return this;
      }
      /**
       * <code>required .radapter.Rexp.RClass rclass = 1;</code>
       */
      public Builder clearRclass() {
        bitField0_ = (bitField0_ & ~0x00000001);
        rclass_ = com.simple.radapter.protobuf.REXPProtos.Rexp.RClass.NILSXP;
        
        return this;
      }

      // repeated double realValue = 2 [packed = true];
      private java.util.List<java.lang.Double> realValue_ = java.util.Collections.emptyList();
      private void ensureRealValueIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          realValue_ = new java.util.ArrayList<java.lang.Double>(realValue_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated double realValue = 2 [packed = true];</code>
       */
      public java.util.List<java.lang.Double>
          getRealValueList() {
        return java.util.Collections.unmodifiableList(realValue_);
      }
      /**
       * <code>repeated double realValue = 2 [packed = true];</code>
       */
      public int getRealValueCount() {
        return realValue_.size();
      }
      /**
       * <code>repeated double realValue = 2 [packed = true];</code>
       */
      public double getRealValue(int index) {
        return realValue_.get(index);
      }
      /**
       * <code>repeated double realValue = 2 [packed = true];</code>
       */
      public Builder setRealValue(
          int index, double value) {
        ensureRealValueIsMutable();
        realValue_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated double realValue = 2 [packed = true];</code>
       */
      public Builder addRealValue(double value) {
        ensureRealValueIsMutable();
        realValue_.add(value);
        
        return this;
      }
      /**
       * <code>repeated double realValue = 2 [packed = true];</code>
       */
      public Builder addAllRealValue(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureRealValueIsMutable();
        super.addAll(values, realValue_);
        
        return this;
      }
      /**
       * <code>repeated double realValue = 2 [packed = true];</code>
       */
      public Builder clearRealValue() {
        realValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        
        return this;
      }

      // repeated sint32 intValue = 3 [packed = true];
      private java.util.List<java.lang.Integer> intValue_ = java.util.Collections.emptyList();
      private void ensureIntValueIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          intValue_ = new java.util.ArrayList<java.lang.Integer>(intValue_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated sint32 intValue = 3 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getIntValueList() {
        return java.util.Collections.unmodifiableList(intValue_);
      }
      /**
       * <code>repeated sint32 intValue = 3 [packed = true];</code>
       */
      public int getIntValueCount() {
        return intValue_.size();
      }
      /**
       * <code>repeated sint32 intValue = 3 [packed = true];</code>
       */
      public int getIntValue(int index) {
        return intValue_.get(index);
      }
      /**
       * <code>repeated sint32 intValue = 3 [packed = true];</code>
       */
      public Builder setIntValue(
          int index, int value) {
        ensureIntValueIsMutable();
        intValue_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated sint32 intValue = 3 [packed = true];</code>
       */
      public Builder addIntValue(int value) {
        ensureIntValueIsMutable();
        intValue_.add(value);
        
        return this;
      }
      /**
       * <code>repeated sint32 intValue = 3 [packed = true];</code>
       */
      public Builder addAllIntValue(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIntValueIsMutable();
        super.addAll(values, intValue_);
        
        return this;
      }
      /**
       * <code>repeated sint32 intValue = 3 [packed = true];</code>
       */
      public Builder clearIntValue() {
        intValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        
        return this;
      }

      // repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;
      private java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN> booleanValue_ =
        java.util.Collections.emptyList();
      private void ensureBooleanValueIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          booleanValue_ = new java.util.ArrayList<com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN>(booleanValue_);
          bitField0_ |= 0x00000008;
        }
      }
      /**
       * <code>repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;</code>
       */
      public java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN> getBooleanValueList() {
        return java.util.Collections.unmodifiableList(booleanValue_);
      }
      /**
       * <code>repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;</code>
       */
      public int getBooleanValueCount() {
        return booleanValue_.size();
      }
      /**
       * <code>repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;</code>
       */
      public com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN getBooleanValue(int index) {
        return booleanValue_.get(index);
      }
      /**
       * <code>repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;</code>
       */
      public Builder setBooleanValue(
          int index, com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBooleanValueIsMutable();
        booleanValue_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;</code>
       */
      public Builder addBooleanValue(com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBooleanValueIsMutable();
        booleanValue_.add(value);
        
        return this;
      }
      /**
       * <code>repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;</code>
       */
      public Builder addAllBooleanValue(
          java.lang.Iterable<? extends com.simple.radapter.protobuf.REXPProtos.Rexp.RBOOLEAN> values) {
        ensureBooleanValueIsMutable();
        super.addAll(values, booleanValue_);
        
        return this;
      }
      /**
       * <code>repeated .radapter.Rexp.RBOOLEAN booleanValue = 4;</code>
       */
      public Builder clearBooleanValue() {
        booleanValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        
        return this;
      }

      // repeated string stringValue = 5;
      private com.google.protobuf.LazyStringList stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureStringValueIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          stringValue_ = new com.google.protobuf.LazyStringArrayList(stringValue_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated string stringValue = 5;</code>
       */
      public java.util.List<java.lang.String>
          getStringValueList() {
        return java.util.Collections.unmodifiableList(stringValue_);
      }
      /**
       * <code>repeated string stringValue = 5;</code>
       */
      public int getStringValueCount() {
        return stringValue_.size();
      }
      /**
       * <code>repeated string stringValue = 5;</code>
       */
      public java.lang.String getStringValue(int index) {
        return stringValue_.get(index);
      }
      /**
       * <code>repeated string stringValue = 5;</code>
       */
      public com.google.protobuf.ByteString
          getStringValueBytes(int index) {
        return stringValue_.getByteString(index);
      }
      /**
       * <code>repeated string stringValue = 5;</code>
       */
      public Builder setStringValue(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValueIsMutable();
        stringValue_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated string stringValue = 5;</code>
       */
      public Builder addStringValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValueIsMutable();
        stringValue_.add(value);
        
        return this;
      }
      /**
       * <code>repeated string stringValue = 5;</code>
       */
      public Builder addAllStringValue(
          java.lang.Iterable<java.lang.String> values) {
        ensureStringValueIsMutable();
        super.addAll(values, stringValue_);
        
        return this;
      }
      /**
       * <code>repeated string stringValue = 5;</code>
       */
      public Builder clearStringValue() {
        stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        
        return this;
      }
      /**
       * <code>repeated string stringValue = 5;</code>
       */
      public Builder addStringValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValueIsMutable();
        stringValue_.add(value);
        
        return this;
      }

      // optional bytes rawValue = 6;
      private com.google.protobuf.ByteString rawValue_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes rawValue = 6;</code>
       */
      public boolean hasRawValue() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bytes rawValue = 6;</code>
       */
      public com.google.protobuf.ByteString getRawValue() {
        return rawValue_;
      }
      /**
       * <code>optional bytes rawValue = 6;</code>
       */
      public Builder setRawValue(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        rawValue_ = value;
        
        return this;
      }
      /**
       * <code>optional bytes rawValue = 6;</code>
       */
      public Builder clearRawValue() {
        bitField0_ = (bitField0_ & ~0x00000020);
        rawValue_ = getDefaultInstance().getRawValue();
        
        return this;
      }

      // repeated .radapter.CMPLX complexValue = 7;
      private java.util.List<com.simple.radapter.protobuf.REXPProtos.CMPLX> complexValue_ =
        java.util.Collections.emptyList();
      private void ensureComplexValueIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          complexValue_ = new java.util.ArrayList<com.simple.radapter.protobuf.REXPProtos.CMPLX>(complexValue_);
          bitField0_ |= 0x00000040;
         }
      }

      /**
       * <code>repeated .radapter.CMPLX complexValue = 7;</code>
       */
      public java.util.List<com.simple.radapter.protobuf.REXPProtos.CMPLX> getComplexValueList() {
        return java.util.Collections.unmodifiableList(complexValue_);
      }
      /**
       * <code>repeated .radapter.CMPLX complexValue = 7;</code>
       */
      public int getComplexValueCount() {
        return complexValue_.size();
      }
      /**
       * <code>repeated .radapter.CMPLX complexValue = 7;</code>
       */
      public com.simple.radapter.protobuf.REXPProtos.CMPLX getComplexValue(int index) {
        return complexValue_.get(index);
      }
      /**
       * <code>repeated .radapter.CMPLX complexValue = 7;</code>
       */
      public Builder setComplexValue(
          int index, com.simple.radapter.protobuf.REXPProtos.CMPLX value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureComplexValueIsMutable();
        complexValue_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .radapter.CMPLX complexValue = 7;</code>
       */
      public Builder setComplexValue(
          int index, com.simple.radapter.protobuf.REXPProtos.CMPLX.Builder builderForValue) {
        ensureComplexValueIsMutable();
        complexValue_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .radapter.CMPLX complexValue = 7;</code>
       */
      public Builder addComplexValue(com.simple.radapter.protobuf.REXPProtos.CMPLX value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureComplexValueIsMutable();
        complexValue_.add(value);

        return this;
      }
      /**
       * <code>repeated .radapter.CMPLX complexValue = 7;</code>
       */
      public Builder addComplexValue(
          int index, com.simple.radapter.protobuf.REXPProtos.CMPLX value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureComplexValueIsMutable();
        complexValue_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .radapter.CMPLX complexValue = 7;</code>
       */
      public Builder addComplexValue(
          com.simple.radapter.protobuf.REXPProtos.CMPLX.Builder builderForValue) {
        ensureComplexValueIsMutable();
        complexValue_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .radapter.CMPLX complexValue = 7;</code>
       */
      public Builder addComplexValue(
          int index, com.simple.radapter.protobuf.REXPProtos.CMPLX.Builder builderForValue) {
        ensureComplexValueIsMutable();
        complexValue_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .radapter.CMPLX complexValue = 7;</code>
       */
      public Builder addAllComplexValue(
          java.lang.Iterable<? extends com.simple.radapter.protobuf.REXPProtos.CMPLX> values) {
        ensureComplexValueIsMutable();
        super.addAll(values, complexValue_);

        return this;
      }
      /**
       * <code>repeated .radapter.CMPLX complexValue = 7;</code>
       */
      public Builder clearComplexValue() {
        complexValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);

        return this;
      }
      /**
       * <code>repeated .radapter.CMPLX complexValue = 7;</code>
       */
      public Builder removeComplexValue(int index) {
        ensureComplexValueIsMutable();
        complexValue_.remove(index);

        return this;
      }

      // repeated .radapter.Rexp rexpValue = 8;
      private java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp> rexpValue_ =
        java.util.Collections.emptyList();
      private void ensureRexpValueIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          rexpValue_ = new java.util.ArrayList<com.simple.radapter.protobuf.REXPProtos.Rexp>(rexpValue_);
          bitField0_ |= 0x00000080;
         }
      }

      /**
       * <code>repeated .radapter.Rexp rexpValue = 8;</code>
       */
      public java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp> getRexpValueList() {
        return java.util.Collections.unmodifiableList(rexpValue_);
      }
      /**
       * <code>repeated .radapter.Rexp rexpValue = 8;</code>
       */
      public int getRexpValueCount() {
        return rexpValue_.size();
      }
      /**
       * <code>repeated .radapter.Rexp rexpValue = 8;</code>
       */
      public com.simple.radapter.protobuf.REXPProtos.Rexp getRexpValue(int index) {
        return rexpValue_.get(index);
      }
      /**
       * <code>repeated .radapter.Rexp rexpValue = 8;</code>
       */
      public Builder setRexpValue(
          int index, com.simple.radapter.protobuf.REXPProtos.Rexp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRexpValueIsMutable();
        rexpValue_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp rexpValue = 8;</code>
       */
      public Builder setRexpValue(
          int index, com.simple.radapter.protobuf.REXPProtos.Rexp.Builder builderForValue) {
        ensureRexpValueIsMutable();
        rexpValue_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp rexpValue = 8;</code>
       */
      public Builder addRexpValue(com.simple.radapter.protobuf.REXPProtos.Rexp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRexpValueIsMutable();
        rexpValue_.add(value);

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp rexpValue = 8;</code>
       */
      public Builder addRexpValue(
          int index, com.simple.radapter.protobuf.REXPProtos.Rexp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRexpValueIsMutable();
        rexpValue_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp rexpValue = 8;</code>
       */
      public Builder addRexpValue(
          com.simple.radapter.protobuf.REXPProtos.Rexp.Builder builderForValue) {
        ensureRexpValueIsMutable();
        rexpValue_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp rexpValue = 8;</code>
       */
      public Builder addRexpValue(
          int index, com.simple.radapter.protobuf.REXPProtos.Rexp.Builder builderForValue) {
        ensureRexpValueIsMutable();
        rexpValue_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp rexpValue = 8;</code>
       */
      public Builder addAllRexpValue(
          java.lang.Iterable<? extends com.simple.radapter.protobuf.REXPProtos.Rexp> values) {
        ensureRexpValueIsMutable();
        super.addAll(values, rexpValue_);

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp rexpValue = 8;</code>
       */
      public Builder clearRexpValue() {
        rexpValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp rexpValue = 8;</code>
       */
      public Builder removeRexpValue(int index) {
        ensureRexpValueIsMutable();
        rexpValue_.remove(index);

        return this;
      }

      // repeated string attrName = 11;
      private com.google.protobuf.LazyStringList attrName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureAttrNameIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          attrName_ = new com.google.protobuf.LazyStringArrayList(attrName_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated string attrName = 11;</code>
       */
      public java.util.List<java.lang.String>
          getAttrNameList() {
        return java.util.Collections.unmodifiableList(attrName_);
      }
      /**
       * <code>repeated string attrName = 11;</code>
       */
      public int getAttrNameCount() {
        return attrName_.size();
      }
      /**
       * <code>repeated string attrName = 11;</code>
       */
      public java.lang.String getAttrName(int index) {
        return attrName_.get(index);
      }
      /**
       * <code>repeated string attrName = 11;</code>
       */
      public com.google.protobuf.ByteString
          getAttrNameBytes(int index) {
        return attrName_.getByteString(index);
      }
      /**
       * <code>repeated string attrName = 11;</code>
       */
      public Builder setAttrName(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureAttrNameIsMutable();
        attrName_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated string attrName = 11;</code>
       */
      public Builder addAttrName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureAttrNameIsMutable();
        attrName_.add(value);
        
        return this;
      }
      /**
       * <code>repeated string attrName = 11;</code>
       */
      public Builder addAllAttrName(
          java.lang.Iterable<java.lang.String> values) {
        ensureAttrNameIsMutable();
        super.addAll(values, attrName_);
        
        return this;
      }
      /**
       * <code>repeated string attrName = 11;</code>
       */
      public Builder clearAttrName() {
        attrName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000100);
        
        return this;
      }
      /**
       * <code>repeated string attrName = 11;</code>
       */
      public Builder addAttrNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureAttrNameIsMutable();
        attrName_.add(value);
        
        return this;
      }

      // repeated .radapter.Rexp attrValue = 12;
      private java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp> attrValue_ =
        java.util.Collections.emptyList();
      private void ensureAttrValueIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          attrValue_ = new java.util.ArrayList<com.simple.radapter.protobuf.REXPProtos.Rexp>(attrValue_);
          bitField0_ |= 0x00000200;
         }
      }

      /**
       * <code>repeated .radapter.Rexp attrValue = 12;</code>
       */
      public java.util.List<com.simple.radapter.protobuf.REXPProtos.Rexp> getAttrValueList() {
        return java.util.Collections.unmodifiableList(attrValue_);
      }
      /**
       * <code>repeated .radapter.Rexp attrValue = 12;</code>
       */
      public int getAttrValueCount() {
        return attrValue_.size();
      }
      /**
       * <code>repeated .radapter.Rexp attrValue = 12;</code>
       */
      public com.simple.radapter.protobuf.REXPProtos.Rexp getAttrValue(int index) {
        return attrValue_.get(index);
      }
      /**
       * <code>repeated .radapter.Rexp attrValue = 12;</code>
       */
      public Builder setAttrValue(
          int index, com.simple.radapter.protobuf.REXPProtos.Rexp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttrValueIsMutable();
        attrValue_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp attrValue = 12;</code>
       */
      public Builder setAttrValue(
          int index, com.simple.radapter.protobuf.REXPProtos.Rexp.Builder builderForValue) {
        ensureAttrValueIsMutable();
        attrValue_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp attrValue = 12;</code>
       */
      public Builder addAttrValue(com.simple.radapter.protobuf.REXPProtos.Rexp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttrValueIsMutable();
        attrValue_.add(value);

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp attrValue = 12;</code>
       */
      public Builder addAttrValue(
          int index, com.simple.radapter.protobuf.REXPProtos.Rexp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttrValueIsMutable();
        attrValue_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp attrValue = 12;</code>
       */
      public Builder addAttrValue(
          com.simple.radapter.protobuf.REXPProtos.Rexp.Builder builderForValue) {
        ensureAttrValueIsMutable();
        attrValue_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp attrValue = 12;</code>
       */
      public Builder addAttrValue(
          int index, com.simple.radapter.protobuf.REXPProtos.Rexp.Builder builderForValue) {
        ensureAttrValueIsMutable();
        attrValue_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp attrValue = 12;</code>
       */
      public Builder addAllAttrValue(
          java.lang.Iterable<? extends com.simple.radapter.protobuf.REXPProtos.Rexp> values) {
        ensureAttrValueIsMutable();
        super.addAll(values, attrValue_);

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp attrValue = 12;</code>
       */
      public Builder clearAttrValue() {
        attrValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);

        return this;
      }
      /**
       * <code>repeated .radapter.Rexp attrValue = 12;</code>
       */
      public Builder removeAttrValue(int index) {
        ensureAttrValueIsMutable();
        attrValue_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:radapter.Rexp)
    }

    static {
      defaultInstance = new Rexp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:radapter.Rexp)
  }

  public interface CMPLXOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional double real = 1 [default = 0];
    /**
     * <code>optional double real = 1 [default = 0];</code>
     */
    boolean hasReal();
    /**
     * <code>optional double real = 1 [default = 0];</code>
     */
    double getReal();

    // required double imag = 2;
    /**
     * <code>required double imag = 2;</code>
     */
    boolean hasImag();
    /**
     * <code>required double imag = 2;</code>
     */
    double getImag();
  }
  /**
   * Protobuf type {@code radapter.CMPLX}
   */
  public static final class CMPLX extends
      com.google.protobuf.GeneratedMessageLite
      implements CMPLXOrBuilder {
    // Use CMPLX.newBuilder() to construct.
    private CMPLX(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private CMPLX(boolean noInit) {}

    private static final CMPLX defaultInstance;
    public static CMPLX getDefaultInstance() {
      return defaultInstance;
    }

    public CMPLX getDefaultInstanceForType() {
      return defaultInstance;
    }

    private CMPLX(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              real_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              imag_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<CMPLX> PARSER =
        new com.google.protobuf.AbstractParser<CMPLX>() {
      public CMPLX parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMPLX(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CMPLX> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional double real = 1 [default = 0];
    public static final int REAL_FIELD_NUMBER = 1;
    private double real_;
    /**
     * <code>optional double real = 1 [default = 0];</code>
     */
    public boolean hasReal() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional double real = 1 [default = 0];</code>
     */
    public double getReal() {
      return real_;
    }

    // required double imag = 2;
    public static final int IMAG_FIELD_NUMBER = 2;
    private double imag_;
    /**
     * <code>required double imag = 2;</code>
     */
    public boolean hasImag() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required double imag = 2;</code>
     */
    public double getImag() {
      return imag_;
    }

    private void initFields() {
      real_ = 0D;
      imag_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasImag()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, real_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, imag_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, real_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, imag_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.simple.radapter.protobuf.REXPProtos.CMPLX parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.simple.radapter.protobuf.REXPProtos.CMPLX parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.CMPLX parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.simple.radapter.protobuf.REXPProtos.CMPLX parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.CMPLX parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.simple.radapter.protobuf.REXPProtos.CMPLX parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.CMPLX parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.simple.radapter.protobuf.REXPProtos.CMPLX parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.CMPLX parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.simple.radapter.protobuf.REXPProtos.CMPLX parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.simple.radapter.protobuf.REXPProtos.CMPLX prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code radapter.CMPLX}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.simple.radapter.protobuf.REXPProtos.CMPLX, Builder>
        implements com.simple.radapter.protobuf.REXPProtos.CMPLXOrBuilder {
      // Construct using com.simple.radapter.protobuf.REXPProtos.CMPLX.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        real_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        imag_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.simple.radapter.protobuf.REXPProtos.CMPLX getDefaultInstanceForType() {
        return com.simple.radapter.protobuf.REXPProtos.CMPLX.getDefaultInstance();
      }

      public com.simple.radapter.protobuf.REXPProtos.CMPLX build() {
        com.simple.radapter.protobuf.REXPProtos.CMPLX result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.simple.radapter.protobuf.REXPProtos.CMPLX buildPartial() {
        com.simple.radapter.protobuf.REXPProtos.CMPLX result = new com.simple.radapter.protobuf.REXPProtos.CMPLX(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.real_ = real_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.imag_ = imag_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.simple.radapter.protobuf.REXPProtos.CMPLX other) {
        if (other == com.simple.radapter.protobuf.REXPProtos.CMPLX.getDefaultInstance()) return this;
        if (other.hasReal()) {
          setReal(other.getReal());
        }
        if (other.hasImag()) {
          setImag(other.getImag());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasImag()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.simple.radapter.protobuf.REXPProtos.CMPLX parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.simple.radapter.protobuf.REXPProtos.CMPLX) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional double real = 1 [default = 0];
      private double real_ ;
      /**
       * <code>optional double real = 1 [default = 0];</code>
       */
      public boolean hasReal() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional double real = 1 [default = 0];</code>
       */
      public double getReal() {
        return real_;
      }
      /**
       * <code>optional double real = 1 [default = 0];</code>
       */
      public Builder setReal(double value) {
        bitField0_ |= 0x00000001;
        real_ = value;
        
        return this;
      }
      /**
       * <code>optional double real = 1 [default = 0];</code>
       */
      public Builder clearReal() {
        bitField0_ = (bitField0_ & ~0x00000001);
        real_ = 0D;
        
        return this;
      }

      // required double imag = 2;
      private double imag_ ;
      /**
       * <code>required double imag = 2;</code>
       */
      public boolean hasImag() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required double imag = 2;</code>
       */
      public double getImag() {
        return imag_;
      }
      /**
       * <code>required double imag = 2;</code>
       */
      public Builder setImag(double value) {
        bitField0_ |= 0x00000002;
        imag_ = value;
        
        return this;
      }
      /**
       * <code>required double imag = 2;</code>
       */
      public Builder clearImag() {
        bitField0_ = (bitField0_ & ~0x00000002);
        imag_ = 0D;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:radapter.CMPLX)
    }

    static {
      defaultInstance = new CMPLX(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:radapter.CMPLX)
  }

  public interface ScriptOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required string code = 1;
    /**
     * <code>required string code = 1;</code>
     */
    boolean hasCode();
    /**
     * <code>required string code = 1;</code>
     */
    java.lang.String getCode();
    /**
     * <code>required string code = 1;</code>
     */
    com.google.protobuf.ByteString
        getCodeBytes();
  }
  /**
   * Protobuf type {@code radapter.Script}
   */
  public static final class Script extends
      com.google.protobuf.GeneratedMessageLite
      implements ScriptOrBuilder {
    // Use Script.newBuilder() to construct.
    private Script(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Script(boolean noInit) {}

    private static final Script defaultInstance;
    public static Script getDefaultInstance() {
      return defaultInstance;
    }

    public Script getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Script(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              code_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Script> PARSER =
        new com.google.protobuf.AbstractParser<Script>() {
      public Script parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Script(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Script> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string code = 1;
    public static final int CODE_FIELD_NUMBER = 1;
    private java.lang.Object code_;
    /**
     * <code>required string code = 1;</code>
     */
    public boolean hasCode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string code = 1;</code>
     */
    public java.lang.String getCode() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          code_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string code = 1;</code>
     */
    public com.google.protobuf.ByteString
        getCodeBytes() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        code_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      code_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasCode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getCodeBytes());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getCodeBytes());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.simple.radapter.protobuf.REXPProtos.Script parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Script parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Script parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Script parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Script parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Script parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Script parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Script parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Script parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.simple.radapter.protobuf.REXPProtos.Script parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.simple.radapter.protobuf.REXPProtos.Script prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code radapter.Script}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.simple.radapter.protobuf.REXPProtos.Script, Builder>
        implements com.simple.radapter.protobuf.REXPProtos.ScriptOrBuilder {
      // Construct using com.simple.radapter.protobuf.REXPProtos.Script.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        code_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.simple.radapter.protobuf.REXPProtos.Script getDefaultInstanceForType() {
        return com.simple.radapter.protobuf.REXPProtos.Script.getDefaultInstance();
      }

      public com.simple.radapter.protobuf.REXPProtos.Script build() {
        com.simple.radapter.protobuf.REXPProtos.Script result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.simple.radapter.protobuf.REXPProtos.Script buildPartial() {
        com.simple.radapter.protobuf.REXPProtos.Script result = new com.simple.radapter.protobuf.REXPProtos.Script(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.code_ = code_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.simple.radapter.protobuf.REXPProtos.Script other) {
        if (other == com.simple.radapter.protobuf.REXPProtos.Script.getDefaultInstance()) return this;
        if (other.hasCode()) {
          bitField0_ |= 0x00000001;
          code_ = other.code_;
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCode()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.simple.radapter.protobuf.REXPProtos.Script parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.simple.radapter.protobuf.REXPProtos.Script) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string code = 1;
      private java.lang.Object code_ = "";
      /**
       * <code>required string code = 1;</code>
       */
      public boolean hasCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string code = 1;</code>
       */
      public java.lang.String getCode() {
        java.lang.Object ref = code_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          code_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string code = 1;</code>
       */
      public com.google.protobuf.ByteString
          getCodeBytes() {
        java.lang.Object ref = code_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          code_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string code = 1;</code>
       */
      public Builder setCode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        code_ = value;
        
        return this;
      }
      /**
       * <code>required string code = 1;</code>
       */
      public Builder clearCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        code_ = getDefaultInstance().getCode();
        
        return this;
      }
      /**
       * <code>required string code = 1;</code>
       */
      public Builder setCodeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        code_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:radapter.Script)
    }

    static {
      defaultInstance = new Script(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:radapter.Script)
  }

  public interface EvalResponseOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional sint32 exit_code = 1;
    /**
     * <code>optional sint32 exit_code = 1;</code>
     */
    boolean hasExitCode();
    /**
     * <code>optional sint32 exit_code = 1;</code>
     */
    int getExitCode();
  }
  /**
   * Protobuf type {@code radapter.EvalResponse}
   */
  public static final class EvalResponse extends
      com.google.protobuf.GeneratedMessageLite
      implements EvalResponseOrBuilder {
    // Use EvalResponse.newBuilder() to construct.
    private EvalResponse(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private EvalResponse(boolean noInit) {}

    private static final EvalResponse defaultInstance;
    public static EvalResponse getDefaultInstance() {
      return defaultInstance;
    }

    public EvalResponse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private EvalResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              exitCode_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<EvalResponse> PARSER =
        new com.google.protobuf.AbstractParser<EvalResponse>() {
      public EvalResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EvalResponse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EvalResponse> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional sint32 exit_code = 1;
    public static final int EXIT_CODE_FIELD_NUMBER = 1;
    private int exitCode_;
    /**
     * <code>optional sint32 exit_code = 1;</code>
     */
    public boolean hasExitCode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint32 exit_code = 1;</code>
     */
    public int getExitCode() {
      return exitCode_;
    }

    private void initFields() {
      exitCode_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, exitCode_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, exitCode_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.simple.radapter.protobuf.REXPProtos.EvalResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.simple.radapter.protobuf.REXPProtos.EvalResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.EvalResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.simple.radapter.protobuf.REXPProtos.EvalResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.EvalResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.simple.radapter.protobuf.REXPProtos.EvalResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.EvalResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.simple.radapter.protobuf.REXPProtos.EvalResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.simple.radapter.protobuf.REXPProtos.EvalResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.simple.radapter.protobuf.REXPProtos.EvalResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.simple.radapter.protobuf.REXPProtos.EvalResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code radapter.EvalResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.simple.radapter.protobuf.REXPProtos.EvalResponse, Builder>
        implements com.simple.radapter.protobuf.REXPProtos.EvalResponseOrBuilder {
      // Construct using com.simple.radapter.protobuf.REXPProtos.EvalResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        exitCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.simple.radapter.protobuf.REXPProtos.EvalResponse getDefaultInstanceForType() {
        return com.simple.radapter.protobuf.REXPProtos.EvalResponse.getDefaultInstance();
      }

      public com.simple.radapter.protobuf.REXPProtos.EvalResponse build() {
        com.simple.radapter.protobuf.REXPProtos.EvalResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.simple.radapter.protobuf.REXPProtos.EvalResponse buildPartial() {
        com.simple.radapter.protobuf.REXPProtos.EvalResponse result = new com.simple.radapter.protobuf.REXPProtos.EvalResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.exitCode_ = exitCode_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.simple.radapter.protobuf.REXPProtos.EvalResponse other) {
        if (other == com.simple.radapter.protobuf.REXPProtos.EvalResponse.getDefaultInstance()) return this;
        if (other.hasExitCode()) {
          setExitCode(other.getExitCode());
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.simple.radapter.protobuf.REXPProtos.EvalResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.simple.radapter.protobuf.REXPProtos.EvalResponse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional sint32 exit_code = 1;
      private int exitCode_ ;
      /**
       * <code>optional sint32 exit_code = 1;</code>
       */
      public boolean hasExitCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint32 exit_code = 1;</code>
       */
      public int getExitCode() {
        return exitCode_;
      }
      /**
       * <code>optional sint32 exit_code = 1;</code>
       */
      public Builder setExitCode(int value) {
        bitField0_ |= 0x00000001;
        exitCode_ = value;
        
        return this;
      }
      /**
       * <code>optional sint32 exit_code = 1;</code>
       */
      public Builder clearExitCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        exitCode_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:radapter.EvalResponse)
    }

    static {
      defaultInstance = new EvalResponse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:radapter.EvalResponse)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
