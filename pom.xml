<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.simple</groupId>
	<artifactId>simple-analytics</artifactId>
	<version>1.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>Simple Analytics</name>
	<description>Simple Analytics Main Project</description>

	<issueManagement>
		<system>github</system>
		<url>http://github.com/chinshaw/simple</url>
	</issueManagement>

	<properties>
		<!-- Convenience property to set the GWT version -->
		<shiro.version>1.2.2</shiro.version>
		<guice.version>3.0</guice.version>

		<!-- GWT needs at least java 1.6 -->
		<maven.compiler.source>1.6</maven.compiler.source>
		<maven.compiler.target>1.6</maven.compiler.target>
		<!-- Don't let your Mac use a crazy non-standard encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<modules>
		<module>api</module>
		<module>engine</module>
		<module>domain</module>
		<module>ui</module>
		<module>security</module>
		<module>reporting</module>
	</modules>

	<scm>
		<connection>
      			scm:git:https://github.com/chinshaw/simple-original
    		</connection>
		<developerConnection>
      			scm:git:https://github.com/chinshaw/simple-original
    		</developerConnection>
	</scm>

	<!-- Configuration on which reports will be run, we really don't need the 
		dependencies plugin so we will disable it. It takes quite a while to run 
		if not -->
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.7</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>index</report>
							<report>project-team</report>
							<report>license</report>
							<report>mailing-list</report>
							<report>dependencies</report>
							<report>dependency-convergence</report>
							<report>plugin-management</report>
							<report>cim</report>
							<report>issue-tracking</report>
							<report>scm</report>
							<report>summary</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<!-- This is used to create a report for our unit tests. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.14.1</version>
			</plugin>

			<!-- Site plugin that will look at our bugzilla server and compile a report 
				of the open bugs that can be viewed on our site. This is very useful for 
				users to see if there is already an open issue that they are seeing. -->
			<plugin>
				<groupId>de.smartics.maven.plugin</groupId>
				<artifactId>issues-maven-plugin</artifactId>
				<version>0.4.3</version>
				<configuration>
					<issueManagementUser>reports@localhost.com</issueManagementUser>
					<issueManagementPassword>reports</issueManagementPassword>

					<product>Simple Analytics</product>
				</configuration>
				<reportSets>
					<reportSet>
						<reports>
							<report>bugzilla-releasenotes-report</report>
							<report>bugzilla-issues-report</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>

		</plugins>
	</reporting>


	<repositories>
		<repository>
			<id>local_repo</id>
			<releases>
				<enabled>true</enabled>
				<checksumPolicy>ignore</checksumPolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<url>file://${project.basedir}/repo</url>
		</repository>
	</repositories>

	<dependencies>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-core</artifactId>
			<version>${shiro.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-web</artifactId>
			<version>${shiro.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-aspectj</artifactId>
			<version>${shiro.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-guice</artifactId>
			<version>${shiro.version}</version>
		</dependency>

		<!-- GIN and Guice for IoC / DI -->
		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<version>${guice.version}</version>
		</dependency>

		<!-- Unit tests -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.apiviz</groupId>
			<artifactId>apiviz</artifactId>
			<version>1.3.1.GA</version>
			<scope>provided</scope>
		</dependency>

	</dependencies>



	<!-- Build Plugins -->
	<build>

		<!-- Generate compiled stuff in the folder used for development mode -->
		<outputDirectory>${project.build.directory}/${project.build.finalName}/WEB-INF/classes</outputDirectory>

		<plugins>
			<!-- Apiviz is a plugin that will generate the visual output graphics 
				on our javadoc. This gives the user a visual representation of the layout 
				of the classes -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<doclet>org.jboss.apiviz.APIviz</doclet>
					<docletArtifact>
						<groupId>org.jboss.apiviz</groupId>
						<artifactId>apiviz</artifactId>
						<version>1.3.2.GA</version>
					</docletArtifact>
					<useStandardDocletOptions>true</useStandardDocletOptions>
					<charset>UTF-8</charset>
					<encoding>UTF-8</encoding>
					<docencoding>UTF-8</docencoding>
					<breakiterator>true</breakiterator>
					<version>true</version>
					<author>true</author>
					<keywords>true</keywords>
					<additionalparam>
						-sourceclasspath ${project.build.outputDirectory}
					</additionalparam>
				</configuration>
			</plugin>

			<!-- Site plugin so that it will compile our wiki documents to be viewed, 
				this way our documenation can be viewed right in the project and it can be 
				deployed using plugin. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.2</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.doxia</groupId>
						<artifactId>doxia-module-markdown</artifactId>
						<version>1.3</version>
					</dependency>
				</dependencies>
			</plugin>

		</plugins>
	</build>
</project>
